record(waveform, "$(P)TITLE")
{
    field(DESC, "Run title")
    field(NELM, "256")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)RUNTITLE")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(waveform, "$(P)TITLE:SP")
{
    field(DESC, "Set Run title")
    field(NELM, "256")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(icp,0,0)RUNTITLE")
}

record(bi, "$(P)TITLE:DISPLAY")
{
    field(DESC, "Toggle Run Title Display")
    field(DTYP, "Soft Channel")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "Passive")
    info(archive, "VAL")
}

alias("$(P)TITLE", "$(P)TITLE:SP:RBV")

record(stringin, "$(P)_RBNUMBER")
{
    field(DESC, "Experiment (RB) Number")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)RBNUMBER")
    field(SCAN, "I/O Intr")
    field(FLNK, "$(S)ED:RBNUMBER.PROC")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(stringout, "$(P)_RBNUMBER:SP")
{
    field(DESC, "Set Experiment (RB) Number")
    field(DTYP, "asynOctetWrite")
    field(OUT,  "@asyn(icp,0,0)RBNUMBER")
}

alias("$(P)_RBNUMBER", "$(P)_RBNUMBER:SP:RBV")

record(stringin, "$(P)RUNNUMBER")
{
    field(DESC, "Run Number")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)RUNNUMBER")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(longin, "$(P)IRUNNUMBER")
{
    field(DESC, "Run Number")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)IRUNNUMBER")
    field(SCAN, "I/O Intr")
    info(INTEREST, "MEDIUM")
	info(archive, "VAL")
	field(EGU, "")
}

record(waveform, "$(P)_USERNAME")
{
    field(DESC, "Experiment User name")
    field(NELM, "1024")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)USERNAME")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(waveform, "$(P)_USERNAME:SP")
{
    field(DESC, "Set Experiment User name")
    field(NELM, "1024")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetWrite")
    field(INP, "@asyn(icp,0,0)USERNAME")
    info(autosaveFields, "VAL")
}

alias("$(P)_USERNAME", "$(P)_USERNAME:SP:RBV")

record(stringin, "$(P)INSTNAME")
{
    field(DESC, "Instrument Name")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)INSTNAME")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
}

record(stringin, "$(P)STARTTIME")
{
    field(DESC, "Run Start Time")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)STARTTIME")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(ai, "$(P)NPRATIO")
{
    field(DESC, "Neutron/Proton ratio")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(icp,0,0)NPRATIO")
    field(SCAN, "I/O Intr")
	field(EGU, "")
    info(INTEREST, "HIGH")
}

record(stringin, "$(P)DAETIMINGSOURCE")
{
    field(DESC, "DAE Timing Source")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)DAETIMINGSOURCE")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
}

record(stringin, "$(P)PERIODTYPE")
{
    field(DESC, "DAE Period Type")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)PERIODTYPE")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
}

record(stringin, "$(P)ISISCYCLE")
{
    field(DESC, "ISIS Run Cycle")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)ISISCYCLE")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
}

record(longin, "$(P)RAWFRAMES")
{
    field(DESC, "Raw Frames")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)RAWFRAMES")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "")
    info(archive, "-5.0 VAL")
}

record(longin, "$(P)RAWFRAMES_PD")
{
    field(DESC, "Period Raw Frames")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)RAWFRAMESPD")
    field(SCAN, "I/O Intr")
    info(archive, "-5.0 VAL")
}

record(longin, "$(P)GOODFRAMES")
{
    field(DESC, "Good Frames")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)GOODFRAMES")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "")
    info(archive, "-5.0 VAL")
}

record(longin, "$(P)GOODFRAMES_PD")
{
    field(DESC, "Period Good Frames")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)GOODFRAMESPD")
    field(SCAN, "I/O Intr")
    info(archive, "-5.0 VAL")
}

record(longin, "$(P)RUNDURATION")
{
    field(DESC, "Run Duration")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)RUNDURATION")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "s")
    info(archive, "-30.0 VAL")
}

record(longin, "$(P)RUNDURATION_PD")
{
    field(DESC, "Period Run Duration")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)RUNDURATIONPD")
    field(SCAN, "I/O Intr")
    info(archive, "-30.0 VAL")
}

record(longin, "$(P)NUMTIMECHANNELS")
{
    field(DESC, "Number of Histogram Time Channels")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)NUMTIMECHANNELS")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "")
    info(archive, "VAL")
}

record(longin, "$(P)DAEMEMORYUSED")
{
    field(DESC, "DAE Memory Used")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)DAEMEMORYUSED")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "byte")
    info(archive, "VAL")
}

record(longin, "$(P)NUMSPECTRA")
{
    field(DESC, "Number of DAE Spectra")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)NUMSPECTRA")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "")	
    info(archive, "VAL")
}

record(longin, "$(P)MONITORCOUNTS")
{
    field(DESC, "Displayed Monitor Counts")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)MONITORCOUNTS")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "count")
    info(archive, "VAL")
}

record(longin, "$(P)MONITORSPECTRUM")
{
    field(DESC, "Displayed Monitor Spectrum Number")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)MONITORSPECTRUM")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "")
    info(archive, "VAL")
}

record(longin, "$(P)PERIODSEQ")
{
    field(DESC, "Number of Hardware Period Sequences")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)PERIODSEQ")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "")
    info(archive, "VAL")
}

record(ai, "$(P)BEAMCURRENT")
{
    field(DESC, "DAE Effective Beam Current")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(icp,0,0)BEAMCURRENT")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "uA")
    info(archive, "-5.0 VAL")
}

record(ai, "$(P)TOTALUAMPS")
{
    field(DESC, "DAE Raw Microamps")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(icp,0,0)TOTALUAMPS")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "uA hour")
    info(archive, "-5.0 VAL")
}

record(ai, "$(P)TOTALDAECOUNTS")
{
    field(DESC, "DAE Total Neutron Counts")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(icp,0,0)TOTALDAECOUNTS")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
    info(archive, "-5.0 VAL")
	field(EGU, "count")
}

record(ai, "$(P)MONITORTO")
{
    field(DESC, "Display Monitor High Integral time")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(icp,0,0)MONITORTO")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
	field(EGU, "us")
    info(archive, "VAL")
}

record(ai, "$(P)MONITORFROM")
{
    field(DESC, "Display Monitor Low Integral time")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(icp,0,0)MONITORFROM")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
	field(EGU, "us")
    info(archive, "VAL")
}

record(ai, "$(P)COUNTRATE")
{
    field(DESC, "DAE Count Rate")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(icp,0,0)COUNTRATE")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
	field(EGU, "")
    info(INTEREST, "HIGH")
    info(archive, "-5.0 VAL")
}

record(ai, "$(P)EVENTMODEFRACTION")
{
    field(DESC, "Event Mode DAE Card Fraction")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(icp,0,0)EVENTMODEFRACTION")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "")
}

record(ai, "$(P)GOODUAH")
{
    field(DESC, "DAE Good Microamps")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(icp,0,0)GOODUAH")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "uA hour")
    info(archive, "-5.0 VAL")
}

record(ai, "$(P)GOODUAH_PD")
{
    field(DESC, "Period DAE Good Microamps")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(icp,0,0)GOODUAHPD")
    field(PREC, "3")
    field(SCAN, "I/O Intr")
	field(EGU, "uA hour")
    info(archive, "-5.0 VAL")
}

record(bo, "$(P)BEGINRUN")
{
    field(DESC, "Begin a Run")
    field(ZNAM, "0")
    field(ONAM, "1")
    #Set the initial alarm state
    field(STAT, "NO_ALARM")
    field(FLNK, "$(P)_BEGINRUN1.PROC")
}

record(longout, "$(P)_BEGINRUN1")
{
    field(OUT, "$(P)CS:RC:SYNC:SP PP")
	field(VAL, 1)
    field(FLNK, "$(P)_BEGINRUN2.PROC")
}

record(bo, "$(P)_BEGINRUN2")
{
    field(DESC, "Begin a Run")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(icp,0,0)BEGINRUN")
    field(ZNAM, "0")
    field(ONAM, "1")
	field(VAL, 1)
    field(FLNK, "$(P)_RESTART_ARCHIVER.PROC")
}

## value sent controls begin options (such as DELAYED or PAUSED)
record(longout, "$(P)BEGINRUNEX")
{
    field(DESC, "Begin a Run (with options)")
    field(DTYP, "asynInt32")
    #Set the initial alarm state
    field(STAT, "NO_ALARM")
    field(FLNK, "$(P)_BEGINRUNEX1.PROC")
}

record(longout, "$(P)_BEGINRUNEX1")
{
    field(OUT, "$(P)CS:RC:SYNC:SP PP")
	field(VAL, 1)
    field(FLNK, "$(P)_BEGINRUNEX2.PROC")
}

record(longout, "$(P)_BEGINRUNEX2")
{
    field(DESC, "Begin a Run (with options)")
	field(DOL, "$(P)BEGINRUNEX")
	field(OMSL, "closed_loop")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(icp,0,0)BEGINRUNEX")
    field(FLNK, "$(P)_RESTART_ARCHIVER.PROC")
}

record(bo, "$(P)ABORTRUN")
{
    field(DESC, "Abort a Run")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(icp,0,0)ABORTRUN")
    field(ZNAM, "0")
    field(ONAM, "1")
    #Set the initial alarm state
    field(STAT, "NO_ALARM")
}

record(bo, "$(P)PAUSERUN")
{
    field(DESC, "Pause a Run")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(icp,0,0)PAUSERUN")
    field(ZNAM, "0")
    field(ONAM, "1")
    #Set the initial alarm state
    field(STAT, "NO_ALARM")
}

record(bo, "$(P)RESUMERUN")
{
    field(DESC, "Resume a Run")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(icp,0,0)RESUMERUN")
    field(ZNAM, "0")
    field(ONAM, "1")
    #Set the initial alarm state
    field(STAT, "NO_ALARM")
}

record(bo, "$(P)ENDRUN")
{
    field(DESC, "End a Run")
    field(ZNAM, "0")
    field(ONAM, "1")
    #Set the initial alarm state
    field(STAT, "NO_ALARM")
    field(FLNK, "$(P)_ENDRUN1.PROC")
}

record(seq, "$(P)_ENDRUN1")
{
	field(SELM, "All")
	field(DOL1, "1")
	field(DOL2, "1")
	# give archive time to restart
	field(DLY2, "1")
    field(LNK1, "$(P)_RESTART_ARCHIVER.PROC")
    field(LNK2, "$(P)_ENDRUN2 PP")
}

record(bo, "$(P)_ENDRUN2")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(icp,0,0)ENDRUN")
    field(ZNAM, "0")
    field(ONAM, "1")
    #Set the initial alarm state
    field(STAT, "NO_ALARM")
}

record(bo, "$(P)RECOVERRUN")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(icp,0,0)RECOVERRUN")
    field(ZNAM, "0")
    field(ONAM, "1")
    #Set the initial alarm state
    field(STAT, "NO_ALARM")
}

record(bo, "$(P)SAVERUN")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(icp,0,0)SAVERUN")
    field(ZNAM, "0")
    field(ONAM, "1")
    #Set the initial alarm state
    field(STAT, "NO_ALARM")
}

record(bo, "$(P)UPDATERUN")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(icp,0,0)UPDATERUN")
    field(ZNAM, "0")
    field(ONAM, "1")
    #Set the initial alarm state
    field(STAT, "NO_ALARM")
}

record(bo, "$(P)STORERUN")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(icp,0,0)STORERUN")
    field(ZNAM, "0")
    field(ONAM, "1")
    #Set the initial alarm state
    field(STAT, "NO_ALARM")
}

record(waveform, "$(P)SNAPSHOTCRPT")
{
    field(NELM, "1024")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetWrite")
    field(INP, "@asyn(icp,0,0)SNAPSHOTCRPT")
    #Set the initial alarm state
    field(STAT, "NO_ALARM")
}

record(bo, "$(P)STARTSEWAIT")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(icp,0,0)STARTSEWAIT")
    field(ZNAM, "0")
    field(ONAM, "1")
}

record(bo, "$(P)ENDSEWAIT")
{
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(icp,0,0)ENDSEWAIT")
    field(ZNAM, "0")
    field(ONAM, "1")
}

record(mbbi, "$(P)RUNSTATE")
{
    field(DESC, "Run State")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)RUNSTATUS")
    field(SCAN, "I/O Intr")
    field(ZRVL, 0)
    field(ZRST, "PROCESSING")
    field(ONVL, 1)
    field(ONST, "SETUP")
    field(TWVL, 2)
    field(TWST, "RUNNING")
    field(THVL, 3)
    field(THST, "PAUSED")
    field(FRVL, 4)
    field(FRST, "WAITING")
    field(FVVL, 5)
    field(FVST, "VETOING")
    field(SXVL, 6)
    field(SXST, "ENDING")
    field(SVVL, 7)
    field(SVST, "SAVING")
    field(EIVL, 8)
    field(EIST, "RESUMING")
    field(NIVL, 9)
    field(NIST, "PAUSING")
    field(TEVL, 10)
    field(TEST, "BEGINNING")
    field(ELVL, 11)
    field(ELST, "ABORTING")
    field(TVVL, 12)
    field(TVST, "UPDATING")
    field(TTVL, 13)
    field(TTST, "STORING")
    info(INTEREST, "HIGH")
	info(archive, "VAL")
}

alias("$(P)RUNSTATE", "$(P)RUNSTATE_STR")

record(bi, "$(P)STATETRANS")
{
    field(DESC, "In state transition")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)STATETRANS")
    field(ZNAM, "No")
    field(ONAM, "Yes")
    field(SCAN, "I/O Intr")
}

record(longin, "$(P)PERIOD")
{
    field(DESC, "DAE Period Number")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)PERIOD")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	info(archive, "VAL")
	field(EGU, "")
}

record(longout, "$(P)PERIOD:SP")
{
    field(DESC, "Change DAE Period Number")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(icp,0,0)PERIOD")
}

alias("$(P)PERIOD", "$(P)PERIOD:SP:RBV")

record(longin, "$(P)NUMPERIODS")
{
    field(DESC, "Number of DAE periods")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)NUMPERIODS")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "")
	info(archive, "VAL")
}

record(longout, "$(P)NUMPERIODS:SP")
{
    field(DESC, "Change Number of DAE periods")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn(icp,0,0)NUMPERIODS")
}

alias("$(P)NUMPERIODS", "$(P)NUMPERIODS:SP:RBV")

record(longin, "$(P)TOTALCOUNTS")
{
    field(DESC, "Total counts")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn(icp,0,0)TOTALCOUNTS")
    field(SCAN, "I/O Intr")
    info(INTEREST, "HIGH")
	field(EGU, "count")
    info(archive, "-5.0 VAL")
}

record(waveform, "$(P)DAESETTINGS")
{
    field(NELM, "10000")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)DAESETTINGS")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)DAESETTINGS:SP")
{
    field(NELM, "10000")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(icp,0,0)DAESETTINGS")
}

record(waveform, "$(P)TCBSETTINGS")
{
    field(NELM, "10000")
    field(FTVL, "UCHAR")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)TCBSETTINGS")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)TCBSETTINGS:SP")
{
    field(NELM, "10000")
    field(FTVL, "UCHAR")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(icp,0,0)TCBSETTINGS")
}

record(waveform, "$(P)HARDWAREPERIODS")
{
    field(NELM, "10000")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)HARDWAREPERIODSSETTINGS")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)HARDWAREPERIODS:SP")
{
    field(NELM, "10000")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(icp,0,0)HARDWAREPERIODSSETTINGS")
}

record(waveform, "$(P)UPDATESETTINGS")
{
    field(NELM, "10000")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)UPDATESETTINGS")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)UPDATESETTINGS:SP")
{
    field(NELM, "10000")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(icp,0,0)UPDATESETTINGS")
}

record(waveform, "$(P)VETOSTATUS")
{
    field(NELM, "3000")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)VETOSTATUS")
    field(SCAN, "I/O Intr")
}

record(ai, "$(P)VETOPC")
{
    field(DESC, "Vetoing %")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn(icp,0,0)VETOPC")
    field(SCAN, "I/O Intr")
	field(EGU, "%")
# useful to log, but need a good deadband value or will get too much data
	field(ADEL, 5.0)
	info(archive, "-5.0 VAL")
}

record(waveform, "$(P)ALLMSGS")
{
    field(NELM, "4096")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)ALLMSGS")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)ERRMSGS")
{
    field(NELM, "4096")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn(icp,0,0)ERRMSGS")
    field(SCAN, "I/O Intr")
}

record(waveform, "$(P)WIRING_FILE")
{
   field(DESC, "Wiring table filename")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn(icp,0,0)WIRINGFILE")
   field(SCAN, "I/O Intr")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)DETECTOR_FILE")
{
   field(DESC, "Detector table filename")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn(icp,0,0)DETFILE")
   field(SCAN, "I/O Intr")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)SPECTRA_FILE")
{
   field(DESC, "Spectra table filename")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn(icp,0,0)SPECFILE")
   field(SCAN, "I/O Intr")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)TCB_FILE")
{
   field(DESC, "TCB filename")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn(icp,0,0)TCBFILE")
   field(SCAN, "I/O Intr")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)PERIOD_FILE")
{
   field(DESC, "Periods filename")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn(icp,0,0)PERIODSFILE")
   field(SCAN, "I/O Intr")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

# this is used by INSTETC
record(waveform, "$(P)SAMPLEPAR:SP")
{
    field(DESC, "Set sample parameter")
    field(NELM, "512")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(icp,0,0)SAMPLEPAR")
	field(ASG, "NOTRAPW")
}

# this is used by INSTETC
record(waveform, "$(P)BEAMLINEPAR:SP")
{
    field(DESC, "Set beamline parameter")
    field(NELM, "512")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn(icp,0,0)BEAMLINEPAR")
	field(ASG, "NOTRAPW")
}

## FileList for wiring tables
record(waveform, "$(P)WIRING_DIR:SP")
{
   field(DESC, "Set directory of wiring tables")
   field(DTYP, "asynOctetWrite")
   field(INP, "@asyn($(WIRINGLIST),0,1)DIRBASE")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)WIRING_DIR")
{
   field(DESC, "Get directory of wiring tables")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn($(WIRINGLIST),0,1)DIRBASE")
   field(SCAN, "I/O Intr")
   field(PINI, "YES")
   field(FTVL, "CHAR")
   field(NELM, 256)
}


record(waveform, "$(P)WIRINGTABLES")
{
	field(DESC, "Compressed JSON list of wiring tables")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(WIRINGLIST),0,1)JARR")	
	field(NELM, 16384)
	field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

record(waveform, "$(P)WIRING_PATTERN:SP")
{
   field(DESC, "Set regex search of wiring tables")  
   field(DTYP, "asynOctetWrite")
   field(INP, "@asyn($(WIRINGLIST),0,1)SEARCH")
   field(FTVL, "CHAR")
   field(NELM, 256)
}
record(waveform, "$(P)WIRING_PATTERN")
{
   field(DESC, "Get regex search of wiring tables")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn($(WIRINGLIST),0,1)SEARCH")
   field(SCAN, "I/O Intr")
   field(PINI, "YES")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

## FileList for detector tables
record(waveform, "$(P)DETECTOR_DIR:SP")
{
   field(DESC, "Set directory of detector tables")
   field(DTYP, "asynOctetWrite")
   field(INP, "@asyn($(DETECTORLIST),0,1)DIRBASE")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)DETECTOR_DIR")
{
   field(DESC, "Get directory of detector tables")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn($(DETECTORLIST),0,1)DIRBASE")
   field(SCAN, "I/O Intr")
   field(PINI, "YES")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)DETECTORTABLES")
{
	field(DESC, "Compressed JSON list of detector tables")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(DETECTORLIST),0,1)JARR")	
	field(NELM, 16384)
	field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

record(waveform, "$(P)DETECTOR_PATTERN:SP")
{
   field(DESC, "Set regex search of detector tables")  
   field(DTYP, "asynOctetWrite")
   field(INP, "@asyn($(DETECTORLIST),0,1)SEARCH")
   field(FTVL, "CHAR")
   field(NELM, 256)
}
record(waveform, "$(P)DETECTOR_PATTERN")
{
   field(DESC, "Get regex search of detector tables")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn($(DETECTORLIST),0,1)SEARCH")
   field(SCAN, "I/O Intr")
   field(PINI, "YES")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

## FileList for spectra tables
record(waveform, "$(P)SPECTRA_DIR:SP")
{
   field(DESC, "Set directory of spectra tables")
   field(DTYP, "asynOctetWrite")
   field(INP, "@asyn($(SPECTRALIST),0,1)DIRBASE")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)SPECTRA_DIR")
{
   field(DESC, "Get directory of spectra tables")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn($(SPECTRALIST),0,1)DIRBASE")
   field(SCAN, "I/O Intr")
   field(PINI, "YES")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)SPECTRATABLES")
{
	field(DESC, "Compressed JSON list of spectra tables")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(SPECTRALIST),0,1)JARR")	
	field(NELM, 16384)
	field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

record(waveform, "$(P)SPECTRA_PATTERN:SP")
{
   field(DESC, "Set regex search of spectra tables")  
   field(DTYP, "asynOctetWrite")
   field(INP, "@asyn($(SPECTRALIST),0,1)SEARCH")
   field(FTVL, "CHAR")
   field(NELM, 256)
}
record(waveform, "$(P)SPECTRA_PATTERN")
{
   field(DESC, "Get regex search of spectra tables")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn($(SPECTRALIST),0,1)SEARCH")
   field(SCAN, "I/O Intr")
   field(PINI, "YES")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

## FileList for TCB files
record(waveform, "$(P)TCB_DIR:SP")
{
   field(DESC, "Set directory of TCB files")
   field(DTYP, "asynOctetWrite")
   field(INP, "@asyn($(TCBLIST),0,1)DIRBASE")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)TCB_DIR")
{
   field(DESC, "Get directory of TCB Files")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn($(TCBLIST),0,1)DIRBASE")
   field(SCAN, "I/O Intr")
   field(PINI, "YES")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)TCBFILES")
{
	field(DESC, "Compressed JSON list of TCB Files")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(TCBLIST),0,1)JARR")	
	field(NELM, 16384)
	field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

record(waveform, "$(P)TCB_PATTERN:SP")
{
   field(DESC, "Set regex search of TCB files")  
   field(DTYP, "asynOctetWrite")
   field(INP, "@asyn($(TCBLIST),0,1)SEARCH")
   field(FTVL, "CHAR")
   field(NELM, 256)
}
record(waveform, "$(P)TCB_PATTERN")
{
   field(DESC, "Get regex search of TCB files")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn($(TCBLIST),0,1)SEARCH")
   field(SCAN, "I/O Intr")
   field(PINI, "YES")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

## records for restarting archive engine on a begin
## force processing of _RESTART_ARCHIVER via forward link to restart archiver
record(stringout, "$(P)_ARCHIVER_URL")
{
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(web,0,0)URL0")
	field(PINI, "YES")
	field(VAL, "http://localhost:4813/restart")
}

record(stringin, "$(P)_RESTART_ARCHIVER")
{
    field(DTYP, "asynOctetRead")
    field(INP, "@asyn(web,0,0)DATA0")
	field(SCAN, "Passive")
}

## FileList for period files
record(waveform, "$(P)PERIOD_DIR:SP")
{
   field(DESC, "Set directory of period files")
   field(DTYP, "asynOctetWrite")
   field(INP, "@asyn($(PERIODLIST),0,1)DIRBASE")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)PERIOD_DIR")
{
   field(DESC, "Get directory of period files")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn($(PERIODLIST),0,1)DIRBASE")
   field(SCAN, "I/O Intr")
   field(PINI, "YES")
   field(FTVL, "CHAR")
   field(NELM, 256)
}

record(waveform, "$(P)PERIODFILES")
{
	field(DESC, "Compressed JSON list of period files")
	field(FTVL, "CHAR")
	field(DTYP, "asynOctetRead")
    field(INP, "@asyn($(PERIODLIST),0,1)JARR")	
	field(NELM, 16384)
	field(SCAN, "I/O Intr")
    field(PINI, "YES")
}

record(waveform, "$(P)PERIOD_PATTERN:SP")
{
   field(DESC, "Set regex search of period files")  
   field(DTYP, "asynOctetWrite")
   field(INP, "@asyn($(PERIODLIST),0,1)SEARCH")
   field(FTVL, "CHAR")
   field(NELM, 256)
}
record(waveform, "$(P)PERIOD_PATTERN")
{
   field(DESC, "Get regex search of period files")
   field(DTYP, "asynOctetRead")
   field(INP, "@asyn($(PERIODLIST),0,1)SEARCH")
   field(SCAN, "I/O Intr")
   field(PINI, "YES")
   field(FTVL, "CHAR")
   field(NELM, 256)
}
